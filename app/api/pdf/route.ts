import { NextRequest, NextResponse } from 'next/server';
import { TestRun, QuestionPack } from '@/lib/types';
import puppeteer from 'puppeteer';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { testRun, pack }: { testRun: TestRun; pack: QuestionPack } = body;

    if (!testRun || !pack) {
      return NextResponse.json(
        { error: 'Missing testRun or pack data' },
        { status: 400 }
      );
    }

    // Generate text report
    const summary = `Project ${testRun.projectId.slice(0, 8)}... scored ${testRun.finalScore}% (base: ${testRun.baseScore}%). ${
      testRun.hasCriticalFail ? 'Critical failure detected.' :
      testRun.verdict === 'Pass' ? 'Excellent project - no concerns.' :
      testRun.verdict === 'Bid' ? 'Recommended for bidding with considerations.' :
      'Does not meet minimum requirements.'
    }`;
    
    // Note: Keeping report variable commented out as it's not currently used but may be needed for future text-based reports
    // const report = `BidBoard Test Results...`;

    // Create a simple PDF-like format using HTML
    const htmlContent = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>BidBoard Test Results</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
        h1 { color: #333; border-bottom: 2px solid #333; padding-bottom: 10px; }
        h2 { color: #666; margin-top: 30px; }
        .summary { background: #f5f5f5; padding: 20px; border-radius: 5px; margin: 20px 0; }
        .question { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
        .pass { border-left: 5px solid #4CAF50; }
        .fail { border-left: 5px solid #f44336; }
        .critical { background: #ffebee; }
        .sources { font-size: 0.9em; color: #666; margin-top: 10px; }
        .footer { margin-top: 40px; text-align: center; color: #999; font-size: 0.8em; }
    </style>
</head>
<body>
    <h1>BidBoard Test Results</h1>
    
    <div class="summary">
        <h2>Summary</h2>
        <p><strong>Pack:</strong> ${pack.name}</p>
        <p><strong>Project:</strong> ${testRun.projectId}</p>
        <p><strong>Date:</strong> ${new Date(testRun.completedAt).toLocaleDateString()}</p>
        <p><strong>Final Score:</strong> ${testRun.finalScore}%</p>
        <p><strong>Base Score:</strong> ${testRun.baseScore}%</p>
        <p><strong>Verdict:</strong> ${testRun.verdict}</p>
        <p>${summary}</p>
    </div>

    <h2>Question Results</h2>
    ${testRun.results.map((result, index) => `
        <div class="question ${result.passed ? 'pass' : 'fail'}${result.critical && !result.passed ? ' critical' : ''}">
            <h3>Question ${index + 1}${result.critical ? ' (CRITICAL)' : ''}</h3>
            <p><strong>Question:</strong> ${result.question}</p>
            <p><strong>Answer:</strong> ${result.answer}</p>
            <p><strong>Result:</strong> <span style="color: ${result.passed ? '#4CAF50' : '#f44336'}; font-weight: bold;">${result.passed ? 'PASS' : 'FAIL'}</span></p>
            ${result.sources.length > 0 ? `
                <div class="sources">
                    <strong>Sources:</strong><br>
                    ${result.sources.map(s => {
                        const bucket = process.env.NEXT_PUBLIC_CHAT_SOURCE_BUCKET || 'itb-store-dev';
                        const url = `https://${bucket}.s3.us-east-2.amazonaws.com/itb-documents/${testRun.projectId}/${s.filename}${s.pageNum ? `#page=${s.pageNum}` : ''}`;
                        return `ðŸ“„ <a href="${url}" target="_blank" style="color: #1976d2; text-decoration: none;">${s.humanReadable || s.filename}</a>${s.pageNum ? ` (page ${s.pageNum})` : ''}${s.section ? ` - ${s.section}` : ''}`;
                    }).join('<br>')}
                </div>
            ` : '<div class="sources"><strong>Sources:</strong> No sources</div>'}
        </div>
    `).join('')}

    <div class="footer">
        Generated by BidBoard Test Harness on ${new Date().toLocaleString()}
    </div>
</body>
</html>`;

    // Generate PDF using Puppeteer
    const browser = await puppeteer.launch({
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page = await browser.newPage();
    await page.setContent(htmlContent, { waitUntil: 'networkidle0' });
    
    const pdfBuffer = await page.pdf({
      format: 'A4',
      printBackground: true,
      margin: {
        top: '20mm',
        right: '20mm',
        bottom: '20mm',
        left: '20mm'
      }
    });
    
    await browser.close();

    return new NextResponse(pdfBuffer, {
      status: 200,
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="test-results-${testRun.id}.pdf"`,
      },
    });

  } catch (error) {
    console.error('PDF generation error:', error);
    return NextResponse.json(
      { error: 'Failed to generate PDF' },
      { status: 500 }
    );
  }
} 